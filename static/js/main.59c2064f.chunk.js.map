{"version":3,"sources":["components/Calendar/index.js","components/HeaderMonth/index.js","components/HeaderWeekDays/index.js","api/index.js","store/actions/reminder.action.js","store/actions/types.js","components/Day/ReminderForm/index.js","components/Day/Reminder/index.js","components/Day/index.js","containers/MonthView/index.js","App.js","serviceWorker.js","store/reducers/reminder.reducer.js","store/reducers/rootReducer.js","index.js"],"names":["Calendar","props","className","children","HeaderMonth","to","prevMonth","slug","curMonth","name","nextMonth","headerWeekDays","days","map","weekday","i","key","Api","cityName","axios","get","headers","Accept","process","createReminder","payload","dispatch","type","reminder","updateReminder","reminderForm","handleSetColor","handleSetEditDay","handleCreateUpdateReminder","defaultColor","time","moment","hour","minute","method","onSubmit","e","placeholder","maxLength","defaultValue","description","city","CITIES","value","showSecond","format","use12Hours","inputReadOnly","animation","color","onClose","onClick","handleSetEdit","handleDeleteReminder","style","background","id","weather","Day","useState","editReminder","setEditReminder","useDispatch","reminderSelector","useSelector","state","day","update","a","preventDefault","form","target","querySelector","trim","selectedCity","getWeatherByCity","options","selectedIndex","response","data","main","temp","console","log","length","date","actions","deleteReminderAction","reminders","_sortBy","cssClasses","firstDayIndex","editDay","Fragment","MonthView","setCurMonth","setNextMonth","setPrevMonth","weekdays","useEffect","createState","match","params","year","month","add","subtract","daysInMonth","replace","slice","startOf","push","buildDays","App","path","component","exact","Boolean","window","location","hostname","initialState","prevState","action","uniqueId","concat","forEach","deleteReminder","filter","reducer","combineReducers","reminderReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59c2064f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Calendar = (props) => {\n  return <div className=\"calendar\">{props.children}</div>;\n};\n\nexport default Calendar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nconst HeaderMonth = (props) => (\n  <header className=\"month-header\">\n    <div className=\"row\">\n      <Link to={\"/\" + props.prevMonth.slug}>\n        <i className=\"fas fa-chevron-circle-left\" />\n      </Link>\n    </div>\n    <div className=\"row\">\n      <h1>{props.curMonth.name}</h1>\n    </div>\n    <div className=\"row\">\n      <Link to={\"/\" + props.nextMonth.slug}>\n        <i className=\"fas fa-chevron-circle-right\" />\n      </Link>\n    </div>\n  </header>\n);\n\nexport default HeaderMonth;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst headerWeekDays = (props) => (\n  <header className=\"weekdays\">\n    {props.days.map((weekday, i) => (\n      <strong key={i}>{weekday}</strong>\n    ))}\n  </header>\n);\n\nexport default headerWeekDays;\n","import axios from \"axios\";\n\nclass Api {\n  static getWeatherByCity(cityName) {\n    return axios.get(\n      `https://community-open-weather-map.p.rapidapi.com/weather?q=${cityName}&units=metric`,\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n        },\n      }\n    );\n  }\n}\n\nexport default Api;\n","import * as actionTypes from \"./types\";\nimport Api from \"api\";\n\n// Action creators\nconst createReminderAction = (reminder) => {\n  return {\n    type: actionTypes.CREATE_REMINDER,\n    reminder: reminder,\n  };\n};\n\nconst updateReminderAction = (reminder) => {\n  return {\n    type: actionTypes.UPDATE_REMINDER,\n    reminder: reminder,\n  };\n};\n\nconst deleteReminderAction = (date, id) => {\n  return {\n    type: actionTypes.DELETE_REMINDER,\n    date: date,\n    id: id,\n  };\n};\n\n// Actions\nexport const createReminder = (payload) => {\n  return (dispatch) => {\n    dispatch(createReminderAction(payload));\n  };\n};\n\nexport const updateReminder = (payload) => {\n  return (dispatch) => {\n    dispatch(updateReminderAction(payload));\n  };\n};\n\nexport const deleteReminder = (date, id) => {\n  return (dispatch) => {\n    dispatch(deleteReminderAction(date, id));\n  };\n};\n","export const CREATE_REMINDER = \"CREATE_REMINDER\";\nexport const UPDATE_REMINDER = \"UPDATE_REMINDER\";\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\n","import React from \"react\";\nimport TimePicker from \"rc-time-picker\";\nimport ColorPicker from \"rc-color-picker\";\nimport moment from \"moment\";\nimport \"rc-time-picker/assets/index.css\";\nimport \"rc-color-picker/assets/index.css\";\nimport \"./index.css\";\n\nconst reminderForm = ({\n  reminder,\n  handleSetColor,\n  handleSetEditDay,\n  handleCreateUpdateReminder,\n  defaultColor,\n}) => {\n  const time = reminder.time\n    ? moment(reminder.time, \"HH:mm a\")\n    : moment().hour(0).minute(0);\n\n  return (\n    <form\n      method=\"post\"\n      onSubmit={(e) => handleCreateUpdateReminder(e, reminder)}\n      className=\"reminder-form\"\n    >\n      <textarea\n        className=\"description\"\n        placeholder=\"Reminder\"\n        maxLength=\"30\"\n        defaultValue={reminder.description}\n      />\n\n      <select className=\"city\" placeholder=\"City\" defaultValue={reminder.city}>\n        {CITIES.map((city, i) => (\n          <option key={i} value={city}>\n            {city}\n          </option>\n        ))}\n      </select>\n\n      <TimePicker\n        showSecond={false}\n        defaultValue={time}\n        format=\"h:mm a\"\n        use12Hours\n        inputReadOnly\n      />\n\n      <ColorPicker\n        className=\"color-picker\"\n        animation=\"slide-up\"\n        color={reminder.color || defaultColor}\n        onClose={handleSetColor}\n      />\n\n      <button className=\"btn-submit\">Submit</button>\n\n      <button className=\"btn-cancel\" onClick={() => handleSetEditDay(null)}>\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default reminderForm;\n\nconst CITIES = [\n  \"New York\",\n  \"Buffalo\",\n  \"Rochester\",\n  \"Yonkers\",\n  \"Syracuse\",\n  \"Albany\",\n  \"New Rochelle\",\n  \"Mount Vernon\",\n  \"Schenectady\",\n  \"Utica\",\n  \"White Plains\",\n  \"Hempstead\",\n  \"Troy\",\n  \"Niagara Falls\",\n  \"Binghamton\",\n  \"Freeport\",\n  \"Valley Stream\",\n];\n","import React from \"react\";\nimport \"./index.css\";\n\nconst reminder = ({ reminder, handleSetEdit, handleDeleteReminder }) => (\n  <article className=\"reminder\" style={{ background: reminder.color }}>\n    <div className=\"tools\">\n      <button onClick={() => handleDeleteReminder(reminder.id)}>\n        <i className=\"fas fa-trash-alt\" />\n      </button>\n      <button onClick={() => handleSetEdit(reminder)}>\n        <i className=\"fas fa-edit\" />\n      </button>\n    </div>\n    <strong>{reminder.description}</strong>\n    <strong>{reminder.city}</strong>\n    <strong>{reminder.weather} °C</strong>\n    <time>{reminder.time}</time>\n  </article>\n);\n\nexport default reminder;\n","import React, { useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"store/actions\";\nimport ReminderForm from \"./ReminderForm\";\nimport Reminder from \"./Reminder\";\nimport _sortBy from \"lodash/sortBy\";\nimport \"./index.css\";\nimport Api from \"api\";\n\nconst defaultColor = \"#000\";\n\nconst Day = (props) => {\n  const [editReminder, setEditReminder] = useState({\n    id: null,\n    time: null,\n    description: null,\n    color: defaultColor,\n    city: null,\n    weather: null,\n  });\n  const dispatch = useDispatch();\n  const reminderSelector = useSelector((state) => state);\n\n  const handleSetColor = (data) => {\n    setEditReminder({\n      ...editReminder,\n      color: data.color,\n    });\n  };\n\n  const handleSetEdit = (reminder) => {\n    props.handleSetEditDay(props.day);\n\n    setEditReminder({\n      ...editReminder,\n      ...reminder,\n    });\n  };\n\n  const handleCreateUpdateReminder = async (e, update) => {\n    e.preventDefault();\n\n    const form = e.target;\n    const description = form.querySelector(\".description\").value.trim();\n    const selectedCity = form.querySelector(\".city\");\n    let weather = {};\n\n    try {\n      const response = await Api.getWeatherByCity(\n        selectedCity.options[selectedCity.selectedIndex].value || \"New York\"\n      );\n      weather = response.data.main.temp;\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (description.length) {\n      const payload = {\n        date: props.date,\n        time: form.querySelector(\".rc-time-picker-input\").value,\n        description: description,\n        color: editReminder.color || defaultColor,\n        city:\n          selectedCity.options[selectedCity.selectedIndex].value || \"New York \",\n        weather: weather,\n      };\n\n      if (update.id) {\n        payload[\"id\"] = update.id;\n        dispatch(actions.updateReminder(payload));\n        // props.updateReminder(payload);\n      } else {\n        dispatch(actions.createReminder(payload));\n        // props.createReminder(payload);\n      }\n\n      props.handleSetEditDay(null);\n\n      setEditReminder({});\n    }\n  };\n\n  const handleDeleteReminder = (id) => {\n    dispatch(actions.deleteReminder(props.date, id));\n    // props.deleteReminder(props.date, id);\n  };\n\n  const reminders = _sortBy(reminderSelector[props.date], \"time\") || [];\n\n  const cssClasses = props.firstDayIndex\n    ? `day first-index-${props.firstDayIndex}`\n    : \"day\";\n\n  return (\n    <article className={cssClasses}>\n      {!props.editDay && (\n        <button\n          className=\"btn-new-reminder\"\n          onClick={() => props.handleSetEditDay(props.day)}\n        >\n          <i className=\"fas fa-plus\" />\n        </button>\n      )}\n\n      {props.editDay === props.day ? (\n        <ReminderForm\n          reminder={editReminder}\n          handleSetColor={handleSetColor}\n          handleSetEditDay={props.handleSetEditDay}\n          handleCreateUpdateReminder={handleCreateUpdateReminder}\n          defaultColor={defaultColor}\n        />\n      ) : (\n        <React.Fragment>\n          <header>{props.day}</header>\n\n          {reminders.length\n            ? reminders.map((reminder, i) => {\n                return (\n                  <Reminder\n                    key={i}\n                    reminder={reminder}\n                    handleSetEdit={handleSetEdit}\n                    handleDeleteReminder={handleDeleteReminder}\n                  />\n                );\n              })\n            : null}\n        </React.Fragment>\n      )}\n    </article>\n  );\n};\n\nexport default Day;\n","import React, { useState, useEffect } from \"react\";\nimport HeaderMonth from \"components/HeaderMonth\";\nimport HeaderWeekDays from \"components/HeaderWeekDays\";\nimport Day from \"components/Day\";\nimport moment from \"moment\";\nimport \"./index.css\";\n\nconst MonthView = (props) => {\n  const [curMonth, setCurMonth] = useState({});\n  const [nextMonth, setNextMonth] = useState({});\n  const [prevMonth, setPrevMonth] = useState({});\n  const weekdays = moment.weekdays();\n\n  useEffect(() => {\n    createState(props);\n  }, []);\n\n  useEffect(() => {\n    createState(props);\n  }, [props]);\n\n  const createState = (props) => {\n    const curMonth =\n      props.match.params.year && props.match.params.month\n        ? `${props.match.params.year}-${props.match.params.month}`\n        : moment().format(\"YYYY-MM\");\n\n    const nextMonth = moment(curMonth).add(1, \"M\").format(\"YYYY-MM\");\n\n    const prevMonth = moment(curMonth).subtract(1, \"M\").format(\"YYYY-MM\");\n\n    // this.setState(\n    //   {\n    //     curMonth: {\n    //       date: curMonth,\n    //       name: moment(curMonth).format(\"MMMM YYYY\"),\n    //       days: moment(curMonth).daysInMonth(),\n    //       editDay: null,\n    //     },\n    //     nextMonth: {\n    //       date: nextMonth,\n    //       slug: nextMonth.replace(\"-\", \"/\"),\n    //     },\n    //     prevMonth: {\n    //       date: prevMonth,\n    //       slug: prevMonth.replace(\"-\", \"/\"),\n    //     },\n    //   },\n    //   () => {\n    //     // console.warn(this.state);\n    //   }\n    // );\n\n    setCurMonth({\n      date: curMonth,\n      name: moment(curMonth).format(\"MMMM YYYY\"),\n      days: moment(curMonth).daysInMonth(),\n      editDay: null,\n    });\n\n    setNextMonth({\n      date: nextMonth,\n      slug: nextMonth.replace(\"-\", \"/\"),\n    });\n\n    setPrevMonth({\n      date: prevMonth,\n      slug: prevMonth.replace(\"-\", \"/\"),\n    });\n  };\n\n  const handleSetEditDay = (day) => {\n    // this.setState({\n    //   curMonth: {\n    //     ...this.state.curMonth,\n    //     editDay: day\n    //   }\n    // });\n\n    setCurMonth({\n      ...curMonth,\n      editDay: day,\n    });\n  };\n\n  const buildDays = () => {\n    const days = [];\n    const props = {\n      editDay: curMonth.editDay,\n      handleSetEditDay: handleSetEditDay,\n    };\n\n    for (let i = 1; i <= curMonth.days; i++) {\n      let date = `${curMonth.date}-${(\"0\" + i).slice(-2)}`; // Add leading zeros\n      props[\"date\"] = date;\n      props[\"day\"] = i;\n\n      if (i === 1) {\n        props[\"firstDayIndex\"] = moment(date).startOf(\"month\").format(\"d\");\n      } else {\n        delete props[\"firstDayIndex\"];\n      }\n\n      days.push(<Day key={i} {...props} />);\n    }\n\n    return days;\n  };\n\n  const days = buildDays();\n\n  return (\n    <div className=\"month\">\n      {/* <h1>Welcome</h1> */}\n      <HeaderMonth\n        curMonth={curMonth}\n        nextMonth={nextMonth}\n        prevMonth={prevMonth}\n      />\n      <HeaderWeekDays days={weekdays} />\n      <section className=\"days\">{days}</section>\n    </div>\n  );\n};\n\nexport default MonthView;\n","import React from \"react\";\nimport Calendar from \"components/Calendar\";\nimport \"./App.css\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport MonthView from \"containers/MonthView\";\n\nconst App = () => {\n  return (\n    <Calendar>\n      <HashRouter>\n        <Switch>\n          <Route path=\"/:year/:month\" component={MonthView} />\n          <Route path=\"/\" exact component={MonthView} />\n        </Switch>\n      </HashRouter>\n    </Calendar>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../actions/types\";\nimport uniqueId from \"uuid/dist/v1\";\n\nconst initialState = {};\n\nconst createReminder = (prevState, action) => {\n  const reminder = {\n    id: uniqueId(),\n    time: action.reminder.time,\n    description: action.reminder.description,\n    color: action.reminder.color,\n    city: action.reminder.city,\n    weather: action.reminder.weather,\n  };\n\n  return {\n    ...prevState,\n    [action.reminder.date]: prevState[action.reminder.date]\n      ? prevState[action.reminder.date].concat(reminder)\n      : [reminder],\n  };\n};\n\nconst updateReminder = (prevState, action) => {\n  const reminders = [];\n  [...prevState[action.reminder.date]].forEach((reminder) => {\n    if (action.reminder.id === reminder.id) {\n      reminder = {\n        id: reminder.id,\n        time: action.reminder.time,\n        description: action.reminder.description,\n        color: action.reminder.color,\n        city: action.reminder.city,\n        weather: action.reminder.weather,\n      };\n    }\n    reminders.push(reminder);\n  });\n\n  return {\n    ...prevState,\n    [action.reminder.date]: reminders,\n  };\n};\n\nconst deleteReminder = (prevState, action) => {\n  return {\n    ...prevState,\n    [action.date]: [...prevState[action.date]].filter((reminder) => {\n      return reminder.id !== action.id;\n    }),\n  };\n};\n\nconst reducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.CREATE_REMINDER:\n      return createReminder(prevState, action);\n    case actionTypes.UPDATE_REMINDER:\n      return updateReminder(prevState, action);\n    case actionTypes.DELETE_REMINDER:\n      return deleteReminder(prevState, action);\n    default:\n      return prevState;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport reminderReducer from \"store/reducers/reminder.reducer.js\";\n\nexport default combineReducers({\n  reminderReducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"store\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./styles/main.css\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reminders from \"store/reducers/reminder.reducer\";\n\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : null || compose;\n\nconst store = createStore(reminders, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}